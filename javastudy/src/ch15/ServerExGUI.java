package ch15;

import java.awt.Container;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.Scanner;

import javax.swing.JFrame;

public class ServerExGUI extends JFrame{
	public ServerExGUI() {
		setTitle("chatClient");
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		Container c = new Container();
		setSize(400,600);
		setVisible(true);
	}
	public static void main(String[] args) {
		ServerExGUI seg = new ServerExGUI();
		BufferedReader in = null;
		BufferedWriter out = null;
		ServerSocket listener = null;
		Socket socket = null;
		Scanner scanner = new Scanner(System.in);
		
		try {
			listener = new ServerSocket(9999);
			System.out.println("연결을 기다리고 있습니다.");
			socket = listener.accept();
			System.out.println("연결되었습니다.");
			in = new BufferedReader(new InputStreamReader(socket.getInputStream()));
			out = new BufferedWriter(new OutputStreamWriter(socket.getOutputStream()));
			while(true) {
				String inputMessage = in.readLine();	//클라이언트 in으로부터 한줄읽기
				if(inputMessage.equalsIgnoreCase("bye")) {
					System.out.println("클라이언트에서 bye의 연결을 종료하였음");
					break;
				}
				System.out.println("클라이언트: "+inputMessage);
				System.out.println("보내기 >>");//프롬프트
				String outputMessage = scanner.nextLine();
				out.write(outputMessage+"\n");
				out.flush();//물내리기 out스트림 버퍼의 모든 문자열 전송
			}
		} catch (Exception e) {
			System.out.println(e.getMessage());
		}finally {
			try {
				scanner.close();
				socket.close();
				listener.close();
			} catch (IOException e2) {
				System.out.println("클라이언트와의 채팅 중 오류가 발생했습니다.");
			}
		}
		
	}
}
